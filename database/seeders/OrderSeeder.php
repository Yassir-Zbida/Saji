<?php

namespace Database\Seeders;

use App\Models\Order;
use App\Models\OrderItem;
use App\Models\Product;
use App\Models\User;
use Illuminate\Database\Seeder;
use Illuminate\Support\Str;
use Carbon\Carbon;

class OrderSeeder extends Seeder
{
    /**
     * Run the database seeds.
     */
    public function run(): void
    {
        // Find user with ID 14 (as specified)
        $user = User::find(14);
        
        if (!$user) {
            $this->command->error('User with ID 14 not found. Creating test user...');
            
            // Create a test user if not found
            $user = User::create([
                'id' => 14,
                'name' => 'Test Customer',
                'email' => 'testcustomer@example.com',
                'password' => bcrypt('password'),
                'email_verified_at' => now(),
            ]);
        }
        
        // Get available products
        $products = Product::where('is_active', true)->get();
        
        if ($products->isEmpty()) {
            $this->command->error('No active products found. Please run ProductSeeder first.');
            return;
        }
        
        // Create multiple test orders with different statuses
        $orderStatuses = ['processing', 'completed', 'shipped', 'cancelled'];
        $paymentStatuses = ['pending', 'paid', 'failed'];
        
        // Create 5 orders with varied dates and statuses
        for ($i = 0; $i < 5; $i++) {
            // Create an order with random dates in the past 30 days
            $createdAt = Carbon::now()->subDays(rand(1, 30));
            
            // Get random status based on index to ensure variety
            $status = $orderStatuses[$i % count($orderStatuses)];
            $paymentStatus = $paymentStatuses[$i % count($paymentStatuses)];
            
            // Set payment_method based on the payment status
            $paymentMethod = 'credit_card';
            if ($paymentStatus === 'failed') {
                $paymentMethod = 'credit_card'; 
            } elseif ($paymentStatus === 'pending') {
                $paymentMethod = 'pending';
            }
            
            // Generate a random order number
            $orderNumber = strtoupper(Str::random(2)) . date('Ymd') . str_pad($i + 1, 4, '0', STR_PAD_LEFT);
            
            // Calculate random amounts for this order
            $itemsSubtotal = 0; // We'll calculate this after adding items
            $shipping_amount = rand(500, 1500) / 100; // Random shipping between $5 and $15
            $discount_amount = 0; // No discount for test orders
            
            // Create the order with absolute minimum fields
            // We'll try only fields we are almost certain exist
            try {
                $order = new Order();
                $order->user_id = $user->id;
                $order->order_number = $orderNumber;
                $order->status = $status;
                $order->payment_status = $paymentStatus;
                $order->payment_method = $paymentMethod;
                $order->shipping_method = 'standard';
                $order->shipping_amount = $shipping_amount;
                $order->tax_amount = 0; // Will calculate after adding items
                $order->discount_amount = $discount_amount;
                $order->total_amount = 0; // Will calculate after adding items
                $order->notes = 'This is a test order generated by OrderSeeder';
                $order->created_at = $createdAt;
                $order->updated_at = $createdAt;
                $order->save();
                
                // Add 1-3 random products to the order
                $numItems = rand(1, 3);
                $itemsSubtotal = 0;
                
                for ($j = 0; $j < $numItems; $j++) {
                    $product = $products->random();
                    $quantity = rand(1, 3);
                    $unitPrice = $product->sale_price ?? $product->price;
                    $itemsSubtotal += $unitPrice * $quantity;
                    
                    OrderItem::create([
                        'order_id' => $order->id,
                        'product_id' => $product->id,
                        'product_name' => $product->name,
                        'sku' => $product->sku,
                        'price' => $unitPrice,
                        'quantity' => $quantity,
                        'subtotal' => $unitPrice * $quantity,
                    ]);
                }
                
                // Calculate tax (10% for example)
                $tax_amount = round($itemsSubtotal * 0.1, 2);
                $total_amount = $itemsSubtotal + $tax_amount + $shipping_amount - $discount_amount;
                
                // Update order totals
                $order->tax_amount = $tax_amount;
                $order->total_amount = $total_amount;
                $order->save();
                
                $this->command->info("Created order #{$order->order_number}");
            } catch (\Exception $e) {
                $this->command->error("Error creating order: " . $e->getMessage());
            }
        }
        
        $this->command->info('Finished creating test orders for user ID 14');
    }
}